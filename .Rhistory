accessURL=accessURL,
authURL=authURL)
twitCred$handshake(cainfo="cacert.pem")
twitCred <- OAuthFactory$new(consumerKey=consumerKey,
consumerSecret=consumerSecret,
requestURL=requestURL,
accessURL=accessURL,
authURL=authURL)
twitCred <- OAuthFactory$new(consumerKey=consumer_key,
consumerSecret=consumer_secret,
requestURL=reqURL,
accessURL=accessURL,
authURL=authURL)
twitCred
twitCred <- getTwitterOAuth(consumer_key= consumerKey, consumer_secret=consumerSecret)
# twitter
library(twitteR)
library(base64enc)
library(curl)
# connection setup
download.file(url="https://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
consumer_key <- '	xUFuBcvfLap0IKewRRfADzmda'
consumer_secret <- '7cgHEquy2N6PTwMDUYNRlOtcfcLJC32GsuC6NXiQ2tfZvrcorq'
access_token <- '2809718062-0hpNwmvT5AKSg5bOT8q1FxWi71OXmol2IbfsloE'
access_secret <- 'LnkbCXGkjaYt56hiathlZN8NkluBajWkLOAzFzONFtWqE'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
# twitter
library(twitteR)
library(base64enc)
library(curl)
# connection setup
download.file(url="https://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
#to get your consumerKey and consumerSecret see the twitteR documentation for instructions
# 2809718062-
consumer_key <- '	xUFuBcvfLap0IKewRRfADzmda'
consumer_secret <- '7cgHEquy2N6PTwMDUYNRlOtcfcLJC32GsuC6NXiQ2tfZvrcorq'
access_token <- '0hpNwmvT5AKSg5bOT8q1FxWi71OXmol2IbfsloE'
access_secret <- 'LnkbCXGkjaYt56hiathlZN8NkluBajWkLOAzFzONFtWqE'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
# twitter
library(twitteR)
library(base64enc)
library(curl)
# connection setup
download.file(url="https://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
#to get your consumerKey and consumerSecret see the twitteR documentation for instructions
# 2809718062-
consumer_key <- '	xUFuBcvfLap0IKewRRfADzmda'
consumer_secret <- '7cgHEquy2N6PTwMDUYNRlOtcfcLJC32GsuC6NXiQ2tfZvrcorq'
access_token <- '2809718062-0hpNwmvT5AKSg5bOT8q1FxWi71OXmol2IbfsloE'
access_secret <- 'LnkbCXGkjaYt56hiathlZN8NkluBajWkLOAzFzONFtWqE'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
# twitter
library(twitteR)
library(base64enc)
library(curl)
# connection setup
download.file(url="https://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
#to get your consumerKey and consumerSecret see the twitteR documentation for instructions
# 2809718062-
consumer_key <- '	xUFuBcvfLap0IKewRRfADzmda'
consumer_secret <- '7cgHEquy2N6PTwMDUYNRlOtcfcLJC32GsuC6NXiQ2tfZvrcorq'
access_token <- '2809718062-0hpNwmvT5AKSg5bOT8q1FxWi71OXmol2IbfsloE'
access_secret <- 'LnkbCXGkjaYt56hiathlZN8NkluBajWkLOAzFzONFtWqE'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
consumer_key <- 'xUFuBcvfLap0IKewRRfADzmda'
consumer_secret <- '7cgHEquy2N6PTwMDUYNRlOtcfcLJC32GsuC6NXiQ2tfZvrcorq'
access_token <- '2809718062-0hpNwmvT5AKSg5bOT8q1FxWi71OXmol2IbfsloE'
access_secret <- 'LnkbCXGkjaYt56hiathlZN8NkluBajWkLOAzFzONFtWqE'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
tweets <- userTimeline("WHO", n = 3200)
tweets
# twitter
library(twitteR)
library(base64enc)
library(curl)
# connection setup
download.file(url="https://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
#to get your consumerKey and consumerSecret see the twitteR documentation for instructions
# 2809718062-
consumer_key <- 'xUFuBcvfLap0IKewRRfADzmda'
consumer_secret <- '7cgHEquy2N6PTwMDUYNRlOtcfcLJC32GsuC6NXiQ2tfZvrcorq'
access_token <- '2809718062-0hpNwmvT5AKSg5bOT8q1FxWi71OXmol2IbfsloE'
access_secret <- 'LnkbCXGkjaYt56hiathlZN8NkluBajWkLOAzFzONFtWqE'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
myUser <- getUser("davidnabarro", cainfo="cacert.pem")
myUser
myUser <- getUser("davidnabarro")
myUser
friendships(user_ids = "davidnabarro")
friendships()
myUser$getId()
myUser$getFollowerIDs()
myUser$getFolloweDIDs()
myUser$getFollowedIDs()
myUser$getFriendIDs()
myUser$getFollowers()
myUser$getFriends()
friends <- myUser$getFriends()
as.character(friends
)
as.character(friends)
unlist(friends)
is.list(friends)
lapply(friends, function(x) {x[1]})
friends[1]
friends[[1]]
lapply(friends, function(x) {x[[1]]})
lapply(friends, function(friends) {friends[[1]]})
lapply(friends, function(friends) {friends[1]})
unique(rapply(friends, function(x) head(x, 1)))
friends[1]
unique(rapply(friends, function(x) x[1])))
unique(rapply(friends, function(x) x[1]))
unique(rapply(friends, function(x) unlist(x)))
unique(rapply(friends, function(x) unlist(x)[1]))
unique(rapply(friends, function(x) unlist(x)))
unique(rapply(friends, function(x) as.character(unlist(x)))
)
unique(rapply(friends, function(x) as.character(unlist(x))))
as.character(unique(rapply(friends, function(x) unlist(x)))
)
as.character(unique(rapply(friends, function(x) unlist(x))))
unique(rapply(friends, function(x) as.character(unlist(x))))
unique(rapply(friends, function(x) unlist(x)))
unlist(unique(rapply(friends, function(x) unlist(x)))
)
unlist(unique(rapply(friends, function(x) unlist(x))))
unlist(unique(rapply(friends, function(x) unlist(x))))
rapply(friends, function(x) unlist(x))
unlist(unique(rapply(friends, function(x) unlist(x))))
unique(friends)
unique(friends)
as.character(unique(friends)
)
list(unique(friends)
)
list(unique(friends))
unlist(list(unique(friends))
)
as.character(unlist(list(unique(friends))
)
)
lapply(unique(friends), '[[', 1)
lapply(friends, '[[', 1)
sapply(friends, '[[', 3)
sapply(friends, '[[', 1)
sapply(friends, '[', 1)
friends
sapply(unique(friends), '[', 1)
list(unique(friends))
sapply(list(unique(friends)), '[', 1)
sapply(list(unique(friends)), '[[', 1)
sapply(list(unique(friends)), '[[[', 1)
sapply(list(unique(friends)), '[[', 1)
sapply(list(unique(friends)), '[[', 2)
sapply(list(unique(friends)), '[[]][[]][', 2)
sapply(list(unique(friends)), '[[]][[]][1]', 2)
sapply(list(unique(friends)), '[1]', 2)
sapply(list(unique(friends)), '[', 2)
sapply(list(unique(friends)), '[', 1)
as.character(sapply(list(unique(friends)), '[', 1)
)
as.character(sapply(list(unique(friends)), '[', 1))
sapply(list(unique(friends)), '[', 1)
sapply(list(unique(friends)), '[', 1)[1]
sapply(list(unique(friends)), '[', 1)[[1]]
# twitter
library(twitteR)
library(base64enc)
library(curl)
# connection setup
download.file(url="https://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
#to get your consumerKey and consumerSecret see the twitteR documentation for instructions
# 2809718062-
consumer_key <- 'xUFuBcvfLap0IKewRRfADzmda'
consumer_secret <- '7cgHEquy2N6PTwMDUYNRlOtcfcLJC32GsuC6NXiQ2tfZvrcorq'
access_token <- '2809718062-0hpNwmvT5AKSg5bOT8q1FxWi71OXmol2IbfsloE'
access_secret <- 'LnkbCXGkjaYt56hiathlZN8NkluBajWkLOAzFzONFtWqE'
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
candidates <- c("davidnabarro", "sanianishtar", "FlaviaBustreo", "DrTedros", "pdousteblazy")
myUser <- getUser("davidnabarro")
friendIDs   <- myUser$getFriendIDs()
friends     <- myUser$getFriends
friends
friendIDs
friends     <- myUser$getFriends()
friends
length(friends)
j <- 1
sapply(list(unique(friends)), '[', j)[[1]]
sapply(list(unique(friends)), '[', j)[[1]]
sapply(list(unique(friendIDs)), '[', j)[[1]]
cbind(sapply(list(unique(friends)), '[', j)[[1]], sapply(list(unique(friendIDs)), '[', j)[[1]])
sapply(list(unique(friends)), '[', j)[[1]]
cbind(as.character(sapply(list(unique(friends)), '[', j)[[1]]), sapply(list(unique(friendIDs)), '[', j)[[1]])
as.character(sapply(list(unique(friends)), '[', j)[[1]])
cbind(sapply(list(unique(friends)), '[', j)[[1]], sapply(list(unique(friendIDs)), '[', j)[[1]])
c(sapply(list(unique(friends)), '[', j)[[1]], sapply(list(unique(friendIDs)), '[', j)[[1]])
sapply(list(unique(friends)), '[', j)[[1]]
unlist(c(sapply(list(unique(friends)), '[', j)[[1]], sapply(list(unique(friendIDs)), '[', j)[[1]]))
sapply(list(unique(friends)), '[', j)[[1]]
as.character(sapply(list(unique(friends)), '[', j)[[1]])
sapply(list(unique(friends)), '[', j)[[1]]
unlist(sapply(list(unique(friends)), '[', j)[[1]])
as.character(unlist(sapply(list(unique(friends)), '[', j)[[1]])
)
as.character(unlist(sapply(list(unique(friends)), '[', j)[[1]]))
do.call("rbind", lapply(sapply(list(unique(friends)), '[', j)[[1]], as.character))
c(sapply(list(unique(friends)), '[', j)[[1]], sapply(list(unique(friends)), '[', j)[[1]]
)
sapply(list(unique(friendIDs)), '[', j)[[1]]
c(sapply(list(unique(friendIDs)), '[', j)[[1]], sapply(list(unique(friendIDs)), '[', j)[[1]])
cbind(sapply(list(unique(friendIDs)), '[', j)[[1]])
sapply(list(unique(friends)), '[', j)[[1]]
as.factor(sapply(list(unique(friends)), '[', j)[[1]]
)
unique(sapply(list(unique(friends)), '[', j)[[1]])
sapply(list(unique(friends)), '[', j, USE.NAMES = FALSE)[[1]]
as.character(sapply(list(unique(friends)), '[', j, USE.NAMES = FALSE)[[1]]
)
as.character(sapply(list(unique(friends)), '[', j, USE.NAMES = T)[[1]]
)
apply(list(unique(friends)), '[', j)[[1]]
j
sapply(list(unique(friends)), '[', j)[[1]]
sapply(list(unique(friends)), '[', j)
sapply(list(unique(friends)), '[', j)[[1]][1]
sapply(list(unique(friends)), '[', j)[[1]]
as.data.frame(sapply(list(unique(friends)), '[', j)[[1]])
as.data.frame(sapply(list(unique(friends)), '[', j)[[1]])$name
as.character(as.data.frame(sapply(list(unique(friends)), '[', j)[[1]])$name
)
as.data.frame(sapply(list(unique(friends)), '[', j)[[1]])$screenName
ideigl      <- as.data.frame(NULL)
for(j in 1:length(friends))
{
# loop this
ideigil <- as.data.frame(rbind(ideigl, as.data.frame(sapply(list(unique(friends)), '[', j)[[1]])$screenName))
}
ideigl      <- as.data.frame(NULL)
for(j in 1:length(friends))
{
# loop this
ideigl <- as.data.frame(rbind(ideigl, as.data.frame(sapply(list(unique(friends)), '[', j)[[1]])$screenName))
}
ideigl
as.data.frame(sapply(list(unique(friends)), '[', j)[[1]]))
as.data.frame(sapply(list(unique(friends)), '[', j)[[1]])
ideigl      <- as.data.frame(NULL)
for(j in 1:length(friends))
{
# loop this
ideigl <- as.data.frame(rbind(ideigl, as.data.frame(sapply(list(unique(friends)), '[', j)[[1]])))
}
ideigl
length(followers)
followers   <- myUser$getFollowers()
followers
length(followers)
ideigl2 <- as.data.frame(NULL)
as.data.frame(rbind(ideigl2, as.data.frame(sapply(list(unique(followers)), '[', j)[[1]])))
Sys.time()
today()
as.Date(Sys.time())
paste0(i, "_friends_", as.Date(Sys.time()), ".csv")
i <- "davidnabarro
""
""
i <- "davidnabarro"
paste0(i, "_friends_", as.Date(Sys.time()), ".csv")
write.table(ideigl, paste0(i, "_friends_", as.Date(Sys.time()), ".txt"), sep="/t")
getwd()
write.table(ideigl, paste0(i, "_friends_", as.Date(Sys.time()), ".txt"), sep="\t")
myUser$location
myUser$getLastStatus()
myUser$getStatusesCount()
myUser$statuses
myUser$lastStatus
myUser$getCreated()
searchTwitter("@davidnabarro")
install.packages(RODBC)
install.packages('RODBC')
testdb <- file.path("atc.accdb")
library(RODBC)
testdb <- file.path("atc.accdb")
channel <- odbcConnectAccess2007(testdb)
setwd('c:/gergo/szer/vol3')
adat <- read.csv("eves.csv", header=T, sep=";", dec=",")[,c(1,4,5,27,39,29,37,41,31)]
adat[,2]
adat[,4]
head(adat)
library(Hmisc)
setwd('c:/gergo/fp7')
adat1 <- read.csv('cordis-fp7projects.csv', header=T, sep=";", dec=",")
library(Hmisc)
setwd('c:/gergo/fp7')
adat1 <- read.csv('cordis-fp7projects.csv', header=T, sep=";", dec=",")#[,c(1:5, 17:20)]
# van a projektben lengyel vagy magyar partner
adat1 <- adat1[unique(c(which(adat1$coordinatorCountry %in% c("PL", "HU")), grep(c("PL|HU"), adat1$participantCountries))),]
# EÜ kutprogrammból való projekt
adat1 <- adat1[adat1$programme == "FP7-HEALTH",]
adat1$participantCountries <- as.character(adat1$participantCountries)
adat1$coordinatorCountry <- as.character(adat1$coordinatorCountry)
adat2 <- read.csv('cordis-h2020projects.csv', header=T, sep=";", dec=",")
# van a projektben legyel / magyar partner
adat2 <- adat2[unique(c(which(adat2$coordinatorCountry %in% c("PL", "HU")), grep("PL|HU", adat2$participantCountries))),]
# egészségügyi célú kiírás
adat2 <- adat2[grep(c("H2020-EU.3.1."), adat2$programme),]
# ez az elsődleges elemzési adatbázis
adat <- rbind(adat1, adat2)
rm(list = c('adat1','adat2'))
proj_countries <- lapply(strsplit(paste0(adat$coordinatorCountry,";",adat$participantCountries), ";"), unique)
collect_edges <- NULL
for(i in 1:length(proj_countries))
{
collect_edges <- rbind(collect_edges, expand.grid(proj_countries[i][[1]], proj_countries[i][[1]]))
}
collect_edges      <- collect_edges[-which(as.character(collect_edges[,1]) == as.character(collect_edges[,2])),]
collect_edges.sort <- t(apply(collect_edges, 1, sort))
collect_edges      <- collect_edges[!duplicated(collect_edges.sort),]
collect_nodes <- unique(c(as.character(collect_edges[,1]), as.character(collect_edges[,2])))
# get ecContrib from projects data
fp7_org <- read.csv('cordis-fp7organizations.csv', header=T, sep=";", dec=",")
fp7_org <- fp7_org[which(fp7_org$projectReference %in% adat$reference[adat$programme=="FP7-HEALTH"]),]
length(unique(fp7_org$projectReference))
h2020_org <- read.csv('cordis-h2020organizations.csv', header=T, sep=";", dec=",")
h2020_org <- h2020_org[which(h2020_org$projectReference %in% adat$reference[adat$programme!="FP7-HEALTH"]),]
length(unique(h2020_org$projectReference))
# aggregate ecContrib by country
fp7_ecbycountry <- aggregate(fp7_org$ecContribution ~ fp7_org$country, data=adat, FUN=sum)
h2020_ecbycountry <- aggregate(h2020_org$ecContribution ~ h2020_org$country, data=adat, FUN=sum)
rm(list = c('fp7_org','h2020_org'))
colnames(fp7_ecbycountry) <- c('country', 'ecContrib')
colnames(h2020_ecbycountry) <- c('country', 'ecContrib')
ecbycountry <- rbind(fp7_ecbycountry, h2020_ecbycountry)
ecbycountry <- aggregate(ecbycountry$ecContrib ~ ecbycountry$country, data=ecbycountry, FUN=sum)
colnames(ecbycountry) <- c('country', 'ecContrib')
collect_nodes <- as.data.frame(collect_nodes)
colnames(collect_nodes) <- c('country')
# update nodes data with ecContrib for weighting
collect_nodes <- merge(collect_nodes, ecbycountry, by.x="country", by.y="country", all.x=T)
# update edges by joint projects data
adat$allCountries <- paste0(adat$coordinatorCountry, ";", adat$participantCountries)
collect_edges$total_joint <- 0
for(i in 1:nrow(collect_edges))
{
collect_edges$total_joint[i] <- sum(adat$ecMaxContribution[grep(paste0(collect_edges[i,1], "|", collect_edges[i,2]), adat$allCountries)])
}
collect_edges$total_groups <- as.character(cut2(collect_edges$total_joint, g=10))
collect_edges$total_groups[which(collect_edges$total_groups == "[6.00e+05,1.12e+08)")] <- "1"
collect_edges$total_groups[which(collect_edges$total_groups == "[1.12e+08,1.77e+08)")] <- "2"
collect_edges$total_groups[which(collect_edges$total_groups == "[1.77e+08,2.54e+08)")] <- "3"
collect_edges$total_groups[which(collect_edges$total_groups == "[2.54e+08,4.40e+08)")] <- "4"
collect_edges$total_groups[which(collect_edges$total_groups == "[4.40e+08,5.21e+08)")] <- "5"
collect_edges$total_groups[which(collect_edges$total_groups == "[5.21e+08,6.53e+08)")] <- "6"
collect_edges$total_groups[which(collect_edges$total_groups == "[6.53e+08,7.29e+08)")] <- "7"
collect_edges$total_groups[which(collect_edges$total_groups == "[7.29e+08,8.23e+08)")] <- "8"
collect_edges$total_groups[which(collect_edges$total_groups == "[8.23e+08,9.53e+08)")] <- "9"
collect_edges$total_groups[which(collect_edges$total_groups == "[9.53e+08,1.15e+09]")] <- "10"
collect_edges$type <- "Undirected"
colnames(collect_nodes) <- c('id', "weight")
colnames(collect_edges) <- c('source', "target", "weight2", "weight1", "type")
collect_edges <- collect_edges[, c('source', 'target', 'type', 'weight1', 'weight2')]
collect_nodes$weight_group <- as.character(cut2(collect_nodes$weight, g=10))
collect_nodes$weight_group[which(collect_nodes$weight_group == "[       0,5.49e+04)")] <- "1"
collect_nodes$weight_group[which(collect_nodes$weight_group == "[   54899,1.29e+05)")] <- "2"
collect_nodes$weight_group[which(collect_nodes$weight_group == "[  129420,2.53e+05)")] <- "3"
collect_nodes$weight_group[which(collect_nodes$weight_group == "[  252750,9.56e+05)")] <- "4"
collect_nodes$weight_group[which(collect_nodes$weight_group == "[  956383,1.35e+06)")] <- "5"
collect_nodes$weight_group[which(collect_nodes$weight_group == "[ 1345011,3.28e+06)")] <- "6"
collect_nodes$weight_group[which(collect_nodes$weight_group == "[ 3284972,1.04e+07)")] <- "7"
collect_nodes$weight_group[which(collect_nodes$weight_group == "[10435971,3.14e+07)")] <- "8"
collect_nodes$weight_group[which(collect_nodes$weight_group == "[31414116,5.75e+07)")] <- "9"
collect_nodes$weight_group[which(collect_nodes$weight_group == "[57468340,1.66e+08]")] <- "10"
country_geocode <- read.csv("country_geocode.csv", header=T, sep=";")
collect_nodes <- merge(collect_nodes, country_geocode, by.x="id", by.y="country", all.x=T, all.y=F)
colnames(collect_nodes) <- c('id', 'weight', 'weight_group', 'lat', 'lng', 'label')
collect_nodes <- collect_nodes[, c('id','label', 'weight', 'weight_group', 'lat', 'lng')]
# delete countries with 0 budget or NA
collect_nodes <- collect_nodes[-which(is.na(collect_nodes$weight) | collect_nodes$weight == 0),]
collect_edges <- collect_edges[which(collect_edges$source %in% collect_nodes$id & collect_edges$target %in% collect_nodes$id),]
write.csv(collect_nodes, "country_nodes.csv")
write.csv(collect_edges, "country_edges.csv")
edit(adat)
edit(h2020_org)
fp7_org <- read.csv('cordis-fp7organizations.csv', header=T, sep=";", dec=",")
fp7_org <- fp7_org[which(fp7_org$projectReference %in% adat$reference[adat$programme=="FP7-HEALTH"]),]
nrow(fp7_org)
head(fp7_org, 1)
edit(adat)
head(fp7_org, 1)
head(adat, 1)
colnames(fp7_org)
fp7_org <- fp7_org[,which(colnames(fp7_org) %in% c('projectReference', 'ecContribution', 'projectAcronym', 'id', 'name', 'country'))]
head(fp7_org)
aggregate(ecContribution ~ projectReference+country, data=fp7_org, FUN=sum)
fp7_org <- aggregate(ecContribution ~ projectReference+country, data=fp7_org, FUN=sum)
head(fp7_org)
head(adat)
colnames(adat)
adat_sub <- adat[,which(colnames(adat) %in% c('reference', 'startDate', 'endDate'))]
head(adat_sub)
head(fp7_org)
fp7_org <- read.csv('cordis-fp7organizations.csv', header=T, sep=";", dec=",")
fp7_org <- fp7_org[which(fp7_org$projectReference %in% adat$reference[adat$programme=="FP7-HEALTH"]),]
fp7_org <- fp7_org[,which(colnames(fp7_org) %in% c('projectReference', 'ecContribution', 'projectAcronym', 'id', 'name', 'country'))]
fp7_org <- aggregate(ecContribution ~ projectReference+country, data=fp7_org, FUN=sum)
h2020_org <- read.csv('cordis-h2020organizations.csv', header=T, sep=";", dec=",")
h2020_org <- h2020_org[which(h2020_org$projectReference %in% adat$reference[adat$programme!="FP7-HEALTH"]),]
h2020_org <- h2020_org[,which(colnames(h2020_org) %in% c('projectReference', 'ecContribution', 'projectAcronym', 'id', 'name', 'country'))]
h2020_org <- aggregate(ecContribution ~ projectReference+country, data=h2020_org, FUN=sum)
head(h2020_org)
org_adat <- rbind(fp7_org, h2020_org)
rm(list = c('fp7_org','h2020_org'))
head(org_adat)
head(adat_sub)
adat_sub <- merge(org_adat, adat_sub, by.x = "projectReference", by.y= "reference", all.x=T, all.y=T)
edit(adat_sub)
nrow(org_adatz)
nrow(org_adat)
head(org_adat)
adat_sub <- adat[,which(colnames(adat) %in% c('reference', 'startDate', 'endDate'))]
nrow(adat_sub)
adat_sub <- merge(org_adat, adat_sub, by.x = "projectReference", by.y= "reference", all.x=F, all.y=T)
nrow(adat_sub)
adat_sub <- adat[,which(colnames(adat) %in% c('reference', 'startDate', 'endDate'))]
adat_sub <- merge(org_adat, adat_sub, by.x = "projectReference", by.y= "reference", all.x=F, all.y=F)
nrow(adat_sub)
head(org_adat)
nrow(org_adat)
nrow(adat_sub)
edit(adat_sub)
adat_sub <- adat[,which(colnames(adat) %in% c('reference', 'startDate', 'endDate'))]
adat_sub <- merge(org_adat, adat_sub, by.x = "projectReference", by.y= "reference", all.x=T, all.y=T)
nrow(adat_sub)
edit(adat_sub)
library(Hmisc)
setwd('c:/gergo/fp7')
fp7_org <- read.csv('cordis-fp7organizations.csv', header=T, sep=";", dec=",")
fp7_org <- fp7_org[which(fp7_org$projectReference %in% adat$reference[adat$programme=="FP7-HEALTH"]),]
fp7_org <- fp7_org[,which(colnames(fp7_org) %in% c('projectReference', 'ecContribution', 'projectAcronym', 'id', 'name', 'country'))]
fp7_org <- aggregate(ecContribution ~ projectReference+country, data=fp7_org, FUN=sum)
fp7_org$fwp <- "FP7"
h2020_org <- read.csv('cordis-h2020organizations.csv', header=T, sep=";", dec=",")
h2020_org <- h2020_org[which(h2020_org$projectReference %in% adat$reference[adat$programme!="FP7-HEALTH"]),]
h2020_org <- h2020_org[,which(colnames(h2020_org) %in% c('projectReference', 'ecContribution', 'projectAcronym', 'id', 'name', 'country'))]
h2020_org <- aggregate(ecContribution ~ projectReference+country, data=h2020_org, FUN=sum)
h2020_org$fwp <- "H2020"
org_adat <- rbind(fp7_org, h2020_org)
rm(list = c('fp7_org','h2020_org'))
adat_sub <- adat[,which(colnames(adat) %in% c('reference', 'startDate', 'endDate'))]
adat_sub <- merge(org_adat, adat_sub, by.x = "projectReference", by.y= "reference", all.x=F, all.y=F)
edit(adat_sub)
head(adat_sub)
adat_sub$endDate - adat_sub$startDate
as.Date(adat_sub$endDate)
as.Date(adat_sub$startDate)
as.Date(adat_sub$endDate) - as.Date(adat_sub$startDate)
(as.Date(adat_sub$endDate) - as.Date(adat_sub$startDate))/30
monnb <- function(d) {lt <- as.POSIXlt(as.Date(d, origin="1900-01-01")); \
lt$year*12 + lt$mon }
# compute a month difference as a difference between two monnb's
R> mondf <- function(d1, d2) { monnb(d2) - monnb(d1) }
monnb <- function(d) {
lt <- as.POSIXlt(as.Date(d, origin="1900-01-01"))
lt$year*12 + lt$mon
}
# compute a month difference as a difference between two monnb's
mondf <- function(d1, d2) { monnb(d2) - monnb(d1) }
mondf(as.Date("2008-01-01"), Sys.Date())
106/24
mondf(as.Date(adat_sub$startDate)[1], as.Date(adat_sub$endDate)[1])
head(adat_sub)
head(adat_sub,7)
head(adat_sub,10)
mondf(as.Date(adat_sub$startDate)[10], as.Date(adat_sub$endDate)[10])
36+6
monnb <- function(d) {
lt <- as.POSIXlt(as.Date(d, origin="1900-01-01"))
lt$year*12 + lt$mon
}
mondf <- function(d1, d2) { monnb(d2) - monnb(d1) +1 }
mondf(as.Date(adat_sub$startDate)[10], as.Date(adat_sub$endDate)[10])
adat_sub$duration <- mondf(as.Date(adat_sub$startDate), as.Date(adat_sub$endDate))
adat_sub$duration
adat_sub$ecc_bymonth <- adat_sub$ecContribution / adat_sub$duration
adat_sub$ecc_bymonth
source('C:/gergo/fp7/PolHun.R', echo=TRUE)
edit(adat)
edit(adat)
